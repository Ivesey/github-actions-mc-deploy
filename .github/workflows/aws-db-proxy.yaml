name: "AWS Proxy pipeline"

on:
  workflow_dispatch:
  push:
    branches:
    - main
    paths:
    - src/aws-db-proxy/**

jobs:
  build-and-push-aws-db-proxy:
    uses: ./.github/workflows/build-and-publish.yaml
    with:
      registry: ${{ vars.REGISTRY_TO_PUSH_TO }}
      image-name: ${{ github.actor }}/${{ vars.AWS_PROXY_IMAGE }}
      working-directory: ./src/aws-db-proxy
    secrets: inherit

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
  
  update-aws-proxy:
    runs-on: ubuntu-latest

    needs:
      build-and-push-aws-db-proxy

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
  
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.3.1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: github-actions-demo
          aws-region: ${{ vars.AWS_REGION }}

      - name: Setup kubectl
        id: install-kubectl
        uses: azure/setup-kubectl@v3

      - name: Set EKS context
        id: set-eks-context
        run: |
          aws eks update-kubeconfig \
            --name ${{ vars.EKS_CLUSTER_NAME }} \
            --region ${{ vars.AWS_REGION }}

      - name: Apply latest AWS Manifest
        id: deploy-eks
        run: |
          kubectl set image deployment/main-app \
            proxy=${{ vars.REGISTRY_TO_PUSH_TO }}/ivesey/${{ vars.AWS_PROXY_IMAGE}}:${{ github.sha }} \
            --namespace gha-demo-aws

    # defaults:
    #   run:
    #     shell: bash
    #     working-directory: ${{ env.WORKING_DIRECTORY }}
        
    # # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    # permissions:
    #   contents: read
    #   packages: write
    #   attestations: write
    #   id-token: write

    # steps:
    #   - name: Checkout repository
    #     uses: actions/checkout@v4

    #   # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
    #   - name: Log in to the Container registry
    #     uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
    #     with:
    #       registry: ${{ env.REGISTRY }}
    #       username: ${{ github.actor }}
    #       password: ${{ secrets.GITHUB_TOKEN }}

    #   # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
    #   - name: Extract metadata (tags, labels) for Docker
    #     id: meta
    #     uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
    #     with:
    #       images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

    #   # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
    #   # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see [Usage](https://github.com/docker/build-push-action#usage) in the README of the `docker/build-push-action` repository.
    #   # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
    #   - name: Build and push Docker image
    #     id: push
    #     uses: docker/build-push-action@v6
    #     with:
    #       context: ${{ env.WORKING_DIRECTORY }}
    #       push: true
    #       tags: ${{ steps.meta.outputs.tags }}
    #       labels: ${{ steps.meta.outputs.labels }}
      
    #   # This step generates an artifact attestation for the image, which is an unforgeable statement about where and how it was built. It increases supply chain security for people who consume the image. For more information, see [Using artifact attestations to establish provenance for builds](/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).
    #   - name: Generate artifact attestation
    #     uses: actions/attest-build-provenance@v2
    #     with:
    #       subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
    #       subject-digest: ${{ steps.push.outputs.digest }}
    #       push-to-registry: true
      