name: "Infrastructure as Code pipeline"

on:
 push:
   branches:
   - main
   paths:
   - tf/**

env:
  # verbosity setting for Terraform logs
  TF_LOG: INFO
  # Credentials for deployment to AWS
  # AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  # AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  # S3 bucket for the Terraform state
  BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE}}
  AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}
  AWS_REGION: eu-west-2

permissions:
  id-token: write
  contents: read

jobs:
  infrastructure:
    name: Create or update EKS and AKS clusters
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./tf

    steps:
      - name: Checkout the repository to the runner
        id: checkout
        uses: actions/checkout@v2
 
      - name: Configure AWS credentials
        # id: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4.3.1
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          role-session-name: github-actions-demo
          aws-region: ${{ env.AWS_REGION }}

      - name: AWS hygiene check
        run: |
          aws s3 ls
        continue-on-error: true

      - name: Configure Azure credentials
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Azure hygiene check
        run: |
          az account show
          az group list

      - name: Setup Terraform with specified previous license version on the runner
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.2
    
      - name: Terraform init
        id: init
        run: terraform init -backend-config="bucket=$BUCKET_TF_STATE"
 
      - name: Terraform format
        id: fmt
        run: terraform fmt -check
    
      - name: Terraform validate
        id: validate
        run: terraform validate
 

      # - name: Terraform plan
      #   id: plan
      #   # if: github.event_name == 'pull_request'
      #   run: terraform plan -no-color -input=false
      #   continue-on-error: true
    
      # - uses: actions/github-script@v6
      #   # if: github.event_name == 'pull_request'
      #   env:
      #     PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      #   with:
      #     script: |
      #       const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
      #       #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
      #       #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
      #       #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
 
      #       <details><summary>Show Plan</summary>
 
      #       \`\`\`\n
      #       ${process.env.PLAN}
      #       \`\`\`
 
      #       </details>
      #       *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
 
      #       github.rest.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: output
      #       })
 
      # - name: Terraform Plan Status
      #   if: steps.plan.outcome == 'failure'
      #   run: exit 1
 
      # - name: Terraform Apply
      #   # if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      #   run: terraform apply -auto-approve -input=false